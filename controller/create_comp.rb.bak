require "csv"
require "sqlite3"

module Decor_Standards
	@dbname = 'rio_std'
	@db = SQLite3::Database.new(@dbname)
	@table = 'rio_standards'
	@int_table = 'rio_slidings'
	@bucket_name = 'rio-sub-components'

	def self.get_main_space(input)
		getval = @db.execute("select distinct space from #{@table} order by space asc;")
		mainspace = ""
		getval.each {|val|
			spval = val[0].gsub("_", " ")
			if val[0] == input
				mainspace += '<option value="'+val[0]+'" selected="selected">'+spval+'</option>'
			else
				mainspace += '<option value="'+val[0]+'">'+spval+'</option>'
			end
		}
		mainspace1 = '<select class="ui dropdown" id="main-space" onchange="changeSpaceCategory(this.value)"><option value="0">Select...</option>'+mainspace+'</select>'
		return mainspace1
	end

	def self.add_option(input, type)
		values = DP::get_space_names
		arrval = []
		if values.count != 0
			mainspace = ""
			values.each {|val|
				if type == 1
					if val == input
						mainspace += '<option value="'+val+'" selected="selected">'+val+'</option>'
					else
						mainspace += '<option value="'+val+'">'+val+'</option>'
					end
				else
					mainspace += '<option value="'+val+'">'+val+'</option>'
				end
			}
			mainspace1 = '<select class="ui dropdown" id="space_list" onchange="changeSpaceList(this.value)"><option value="0">Select...</option>'+mainspace+'</select>'
			arrval.push(mainspace1)
		end
		return arrval
	end

	def self.get_main_cat
		maincat = @db.execute("select distinct space from #{@table} order by space asc;")
		mainarr = []
		maincat.each {|v|
			mainarr.push(v[0])
		}
		return mainarr
	end

	def self.get_sub_cat(val)
		subcat = @db.execute("select distinct category from #{@table} where space='#{val}' order by category asc;")
		subarr = []
		subcat.each {|sc|
			subarr.push(sc[0])
		}
		return subarr
	end

	def self.get_sub_space(input, type)
		if type == 1
			getsub = @db.execute("select distinct category from #{@table} where space='#{input[0]}' order by category asc;")
		else
			getsub = @db.execute("select distinct category from #{@table} where space='#{input}' order by category asc;")
		end

		subspace = ""
		getsub.each{|subc|
			spval = subc[0].gsub("_", " ")
			if type.to_i == 1
				if subc[0] == input[1]
					subspace += '<option value="'+subc[0]+'" selected="selected">'+spval+'</option>' 
				else
					subspace += '<option value="'+subc[0]+'">'+spval+'</option>' 
				end
			else
				subspace += '<option value="'+subc[0]+'">'+spval+'</option>' 
			end
		}
		subspace1 = '<select class="ui dropdown" id="sub-space" onchange="changesubSpace(this.value)"><option value="0">Select...</option>'+subspace+'</select>'
		return subspace1
	end

	def self.check_carcass_image(inp1, inp2)
		chkimg = @db.execute("select distinct carcass_code, category from #{@table} where space='#{inp1}' and category='#{inp2}';" )
		cararr = []
		for i in chkimg
			carcass_image = i[0] + '.jpg'
			aws_carcass_path = File.join('carcass',inp1,carcass_image)
			local_carcass_path = File.join(RIO_ROOT_PATH,'cache',carcass_image)
			RioAwsDownload::download_file @bucket_name, aws_carcass_path, local_carcass_path

			if File.exist?(local_carcass_path) != false
				cararr.push(i[0]+"|"+i[1]+"|"+local_carcass_path)
			end			
		end
		return cararr
	end

	def self.get_pro_code(inp, type)
		getco = @db.execute("select distinct carcass_code from #{@table} where space='#{inp[0]}' and category='#{inp[1]}';" )
		proco = ""
		getco.each{|cod|
			spval = cod[0].gsub("_", " ")
			if type == 1
				if inp[2] == cod[0]
					proco += '<option value="'+cod[0]+'" selected="selected">'+spval+'</option>' 
				else
					proco += '<option value="'+cod[0]+'">'+spval+'</option>' 
				end
			else
				proco += '<option value="'+cod[0]+'">'+spval+'</option>' 
			end
		}
		proco1 = '<select class="ui dropdown" id="carcass-code" onchange="changeProCode()"><option value="0">Select...</option>'+proco+'</select>'
		return proco1
	end

	def self.get_comp_image(options)
		main_category = options[0]
		main_category = 'Crockery_Unit' if main_category.start_with?('Crockery')
		sub_category = options[1] #options['sub-category'] #We will use it for decription
		carcass_code = options[2]
		
		#------------------------------------------------------------------------------------------------
		carcass_jpg = carcass_code+'.jpg'
		aws_carcass_path = File.join('carcass',main_category,carcass_jpg)
		local_carcass_path = File.join(RIO_ROOT_PATH,'cache',carcass_jpg)

		RioAwsDownload::download_file @bucket_name, aws_carcass_path, local_carcass_path
		#skppath = DECORPOT_CUST_ASSETS + "/" + input[0] + "/" + imgname + ".jpg"
		# puts skppath
		#return skppath
		return local_carcass_path
	end

	def self.get_carcass_image(input, type)
		maincat = input[0]
		maincat = 'Crockery_Unit' if maincat.start_with?('Crockery')
		getimg = @db.execute("select distinct carcass_code, height, depth, width from #{@table} where space='#{input[0]}' and category='#{input[1]}' order by carcass_code asc;" )
		cararr = []
		for i in getimg
			carcass_image = i[0] + '.jpg'
			aws_carcass_path = File.join('carcass',maincat,carcass_image)
			local_carcass_path = File.join(RIO_ROOT_PATH,'cache',carcass_image)
			RioAwsDownload::download_file @bucket_name, aws_carcass_path, local_carcass_path

			if File.exist?(local_carcass_path) != false
				cararr.push(i[0]+","+i[1]+","+i[2]+","+i[3]+","+local_carcass_path)
			end			
		end

		dircarcase = ""
		path_length = (cararr.length/3)+1
		path_length.times{|index|
			images_arr = cararr.shift(3)
			splitval1 = images_arr[0].split(",") if !images_arr[0].nil?
			val1 = splitval1 if !splitval1.nil?
			splitval2 = images_arr[1].split(",") if !images_arr[1].nil?
			val2 = splitval2 if !splitval2.nil?
			splitval3 = images_arr[2].split(",") if !images_arr[2].nil?
			val3 = splitval3 if !splitval3.nil?

			dircarcase += '<div class="ui equal width grid" style="border:1px solid grey;">'
			dircarcase += '<div class="column" style="border-right:1px solid grey;"><div class="carname">'+input[1]+'_'+val1[0]+'<br>Height:'+val1[1]+'<span class="mandatory"> | </span>Depth:'+val1[2]+'<span class="mandatory"> | </span>Width:'+val1[3]+'</div><div class="carimage"><img src="'+val1[4]+'" width="150" height="150" value="'+val1[0]+'" onclick="getCarImg(this)"></div></div>' if !val1.nil?
			dircarcase += '<div class="column" style="border-right:1px solid grey;"><div class="carname">'+input[1]+'_'+val2[0]+'<br>Height:'+val2[1]+'<span class="mandatory"> | </span>Depth:'+val2[2]+'<span class="mandatory"> | </span>Width:'+val2[3]+'</div><div class="carimage"><img src="'+val2[4]+'" width="150" height="150" value="'+val2[0]+'" onclick="getCarImg(this)"></div></div>' if !val2.nil?
			dircarcase += '<div class="column"><div class="carname">'+input[1]+'_'+val3[0]+'<br>Height:'+val3[1]+'<span class="mandatory"> | </span>Depth:'+val3[2]+'<span class="mandatory"> | </span>Width:'+val3[3]+'</div><div class="carimage"><img src="'+val3[4]+'" width="150" height="150" value="'+val3[0]+'" onclick="getCarImg(this)"></div></div>' if !val3.nil?
			dircarcase += '</div>'
		}

		return dircarcase
	end

	def self.get_carcass_name(input, car)
		get_name = @db.execute("select distinct carcass_name from #{@table} where space='#{input[0]}' and category='#{input[1]}' and carcass_code='#{car}';" )
		retval = [get_name[0][0]+","+car]
		return retval
	end

	def self.get_shutter_image(input)
		getimg = @db.execute("select shutter_code from #{@table} where space='#{input[0]}' and category='#{input[1]}' and carcass_code='#{input[2]}';")
		inp = getimg[0][0].split("/")
		shutarr = []
		for i in inp
			shutter_image = i + '.jpg'
			aws_shutter_path = File.join('shutter',shutter_image)
			local_shut_path = File.join(RIO_ROOT_PATH,'cache', shutter_image)
			RioAwsDownload::download_file @bucket_name, aws_shutter_path, local_shut_path
			shutarr.push(local_shut_path)
		end
		return shutarr
	end

	def self.get_internal_data(val1, val2)
		val2 = val2.split("_")
		json = []
		getint = @db.execute("select left, center, right from #{@int_table} where door_type="+val2[1]+" and slide_width="+val2[2]+" and category="+val1+";")
		json.push("left|"+getint[0][0])
		json.push("center|"+getint[0][1])
		json.push("right|"+getint[0][2])
		return json
	end

	def self.get_intnal(catgry, carcode)
		json = []
		detail = @db.execute("select left, center, right from #{@int_table} where door_type="+carcode[1]+" and slide_width="+carcode[2]+" and category="+catgry+";")
		json.push("left|"+detail[0][0])
		json.push("center|"+detail[0][1])
		json.push("right|"+detail[0][2])
		return json
	end

	def self.place_component options
		comp_origin = nil
		return false if options.empty?
		bucket_name     = 'rio-sub-components'

		puts "comp_options : #{options}"
		if options['edit'] == 1
			sel = Sketchup.active_model.selection[0]
			comp_origin = sel.transformation.origin
			comp_trans = sel.transformation
			Sketchup.active_model.entities.erase_entities sel
		end

		space_name = options['space_name']
		main_category = options['main-category']
		main_category = 'Crockery_Unit' if main_category.start_with?('Crockery') #Temporary mapping ....Move crockery to base unit and top unit later in the AWS server
		sub_category = options['sub-category']   #We will use it for decription
		carcass_code = options['carcass-code']
		shutter_code = options['shutter-code']||''
		internal_code = options['internal-category']||''
		shutter_origin = options['shutter-origin']||''

		#------------------------------------------------------------------------------------------------
		carcass_skp         = carcass_code+'.skp'
		aws_carcass_path    = File.join('carcass',main_category,carcass_skp)
		local_carcass_path  = File.join(RIO_ROOT_PATH,'cache',carcass_skp)

		if File.exists?(local_carcass_path)
		  puts "File already present "
		else
	    puts "Downloading carcass..."
	    resp = RioAwsDownload::download_file bucket_name, aws_carcass_path, local_carcass_path
	    if resp.nil?
	        puts "Carcass file download error  : "+aws_carcass_path
	        return false
	    end
		end
		#------------------------------------------------------------------------------------------------
		if shutter_code.empty?
		  local_shutter_path = ''
		else
	    puts "Downloading shutter"
	    shutter_skp         = shutter_code+'.skp'
	    aws_shutter_path    = File.join('shutter',shutter_skp)
	    local_shutter_path  = File.join(RIO_ROOT_PATH,'cache',shutter_skp)
	    puts shutter_skp, aws_shutter_path
			unless File.exists?(local_shutter_path)
				"Downloading shutter....."
	      RioAwsDownload::download_file bucket_name, aws_shutter_path, local_shutter_path
	    end
		end
		dict_name = 'carcase_spec'
		k2 = 'attr_product_name'
		v2 = sub_category
		k1 = 'attr_product_code'
		v1 = carcass_code

		defn = DP::create_carcass_definition local_carcass_path, local_shutter_path, shutter_origin, internal_code
		defn.set_attribute(:rio_atts, 'rio_comp', 'true')
		defn.set_attribute(:rio_atts, 'space_name', space_name)
        defn.set_attribute(:rio_atts, 'carcass-code', carcass_code)
        defn.set_attribute(:rio_atts, 'shutter-code', shutter_code)
        
		defn.set_attribute(dict_name, k2, v2)
		defn.set_attribute(dict_name, k1, v1)

		options.each{|k, v|
			defn.set_attribute(:rio_atts, k, v)
		}

		prev_active_layer = Sketchup.active_model.active_layer.name
		Sketchup.active_model.active_layer = 'DP_Comp_layer'

		inst = nil

		if options['auto_mode'] == "true"
			sel_comp = Sketchup.active_model.selection[0]
			if sel_comp.nil?
				UI.messagebox 'Component not selected for auto mode. Select component and retry or switch off auto mode.', MB_OK
				return false
			end 
			if sel_comp.layer.name != 'DP_Comp_layer'
				UI.messagebox 'Select Rio component for auto mode', MB_OK
				return false
			end
			rotz 			= sel_comp.transformation.rotz
			comp_origin 	= sel_comp.transformation.origin
			cdef 			= defn
			sel_bounds 		= sel_comp.bounds
			comp 			= sel_comp 


			posn = options['auto_position']
			case posn
			when 'bottom_left'
				puts "bottom_left : #{rotz}"
				z_depth 	= comp.bounds.depth-cdef.bounds.depth
				y_depth     = comp.bounds.height-cdef.bounds.height
				x_depth		= comp.bounds.width-cdef.bounds.height
				case rotz
				when 0
					trans   = Geom::Transformation.new([comp_origin.x-cdef.bounds.width, comp_origin.y+y_depth, comp_origin.z])
					inst    = Sketchup.active_model.active_entities.add_instance cdef, trans
				when 90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x-x_depth, comp_origin.y-cdef.bounds.width, comp_origin.z])
					inst.transform!(trans)
				when 180, -180
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x+cdef.bounds.width, comp_origin.y-y_depth, comp_origin.z])
					inst.transform!(trans)
				when -90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x+x_depth, comp_origin.y+cdef.bounds.width, comp_origin.z])
					inst.transform!(trans)
				end
			when 'front'
				z_depth 	= comp.bounds.depth-cdef.bounds.depth
				y_depth     = comp.bounds.height-cdef.bounds.height
				x_depth		= comp.bounds.width-cdef.bounds.height
                
                rotz.abs==180 ? corner_rotz=rotz+90 : corner_rotz=-90
				puts "corner_rotz : #{corner_rotz}"
				
				case rotz
				when 0
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, 90.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x+cdef.bounds.height, comp_origin.y-cdef.bounds.width, comp_origin.z])
					inst.transform!(trans)
				when 90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, 180.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x+cdef.bounds.width, comp_origin.y+cdef.bounds.height, comp_origin.z])
					inst.transform!(trans)
				when 180, -180
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, 270.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x-cdef.bounds.height, comp_origin.y+cdef.bounds.width, comp_origin.z])
					inst.transform!(trans)
				when -90
					#tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, 0.degrees)
					#inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x-cdef.bounds.width, comp_origin.y-cdef.bounds.height, comp_origin.z])
					inst    = Sketchup.active_model.active_entities.add_instance cdef, trans
					#inst.transform!(trans)
				end
			when 'top_left'
				z_depth 	= comp.bounds.depth-cdef.bounds.depth
				y_depth     = comp.bounds.height-cdef.bounds.height
				x_depth		= comp.bounds.width-cdef.bounds.height
				case rotz
				when 0
					trans   = Geom::Transformation.new([comp_origin.x-cdef.bounds.width, comp_origin.y+y_depth, comp_origin.z+z_depth])
					inst    = Sketchup.active_model.active_entities.add_instance cdef, trans
				when 90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x-x_depth, comp_origin.y-cdef.bounds.width, comp_origin.z+z_depth])
					inst.transform!(trans)
				when 180, -180
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x+cdef.bounds.width, comp_origin.y-y_depth,  comp_origin.z+z_depth])
					inst.transform!(trans)
				when -90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x+x_depth, comp_origin.y+cdef.bounds.width,  comp_origin.z+z_depth])
					inst.transform!(trans)
				end
			when 'bottom_right'
				z_depth 	= comp.bounds.depth-cdef.bounds.depth
				y_depth     = comp.bounds.height-cdef.bounds.height
				x_depth		= comp.bounds.width-cdef.bounds.height
				puts "x_depth : #{x_depth} : #{comp.bounds.width} : #{cdef.bounds.width}"
				case rotz
				when 0
					trans   = Geom::Transformation.new([comp_origin.x+sel_comp.bounds.width, comp_origin.y+y_depth, comp_origin.z])
					inst    = Sketchup.active_model.active_entities.add_instance cdef, trans
				when 90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x-x_depth, comp_origin.y+sel_comp.bounds.height, comp_origin.z])
					inst.transform!(trans)
				when 180, -180
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans = Geom::Transformation.new([comp_origin.x-sel_comp.bounds.width, comp_origin.y-y_depth, comp_origin.z])
					inst.transform!(trans)
				when -90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans = Geom::Transformation.new([comp_origin.x+x_depth, comp_origin.y-sel_comp.bounds.height, comp_origin.z])
					inst.transform!(trans)
				end
			when 'top_right'
				z_depth 	= comp.bounds.depth-cdef.bounds.depth
				y_depth     = comp.bounds.height-cdef.bounds.height
				x_depth		= comp.bounds.width-cdef.bounds.height
				case rotz
				when 0
					trans   = Geom::Transformation.new([comp_origin.x+sel_comp.bounds.width, comp_origin.y+y_depth, comp_origin.z+z_depth])
					inst    = Sketchup.active_model.active_entities.add_instance cdef, trans
				when 90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x-x_depth, comp_origin.y+comp.bounds.height, comp_origin.z+z_depth])
					inst.transform!(trans)
				when 180, -180
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans = Geom::Transformation.new([comp_origin.x-sel_comp.bounds.width, comp_origin.y-y_depth,  comp_origin.z+z_depth])
					inst.transform!(trans)
				when -90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans = Geom::Transformation.new([comp_origin.x+x_depth, comp_origin.y-sel_comp.bounds.height,  comp_origin.z+z_depth])
					inst.transform!(trans)
				end
			when 'top'
				z_depth 	= comp.bounds.depth-cdef.bounds.depth
				y_depth     = comp.bounds.height-cdef.bounds.height
				x_depth		= comp.bounds.width-cdef.bounds.height
				puts "comp_origin.x : #{comp_origin.x} : #{x_depth}"
				case rotz
				when 0
					trans   = Geom::Transformation.new([comp_origin.x, comp_origin.y+y_depth, comp_origin.z+comp.bounds.depth])
					inst    = Sketchup.active_model.active_entities.add_instance cdef, trans
				when 90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x-x_depth, comp_origin.y, comp_origin.z+comp.bounds.depth])
					inst.transform!(trans)
				when 180, -180
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans = Geom::Transformation.new([comp_origin.x, comp_origin.y-y_depth, comp_origin.z+comp.bounds.depth])
					inst.transform!(trans)
				when -90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans 	= Geom::Transformation.new([comp_origin.x+x_depth, comp_origin.y, comp_origin.z+comp.bounds.depth])
					inst.transform!(trans)
				end
			when 'bottom'
				z_depth 	= comp.bounds.depth-cdef.bounds.depth
				y_depth     = comp.bounds.height-cdef.bounds.height
				x_depth		= comp.bounds.width-cdef.bounds.height
				case rotz
				when 0
					trans   = Geom::Transformation.new([comp_origin.x, comp_origin.y+y_depth, comp_origin.z-cdef.bounds.depth])
					inst    = Sketchup.active_model.active_entities.add_instance cdef, trans
				when 90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans   = Geom::Transformation.new([comp_origin.x-x_depth, comp_origin.y, comp_origin.z-cdef.bounds.depth])
					inst.transform!(trans)
				when 180, -180
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans = Geom::Transformation.new([comp_origin.x, comp_origin.y-y_depth, comp_origin.z-cdef.bounds.depth])
					inst.transform!(trans)
				when -90
					tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, rotz.degrees)
					inst    = Sketchup.active_model.active_entities.add_instance cdef, tr
					trans = Geom::Transformation.new([comp_origin.x+x_depth, comp_origin.y, comp_origin.z-cdef.bounds.depth])
					inst.transform!(trans)
				end
			end
			if inst
				wall_overlap_flag 	= DP::check_wall_overlap(inst, space_name)
				comp_over_flag 		= DP::check_comp_overlap(inst, space_name)
				comp_floor_overlap 	= DP::check_comp_floor_overlap(inst, space_name)
				comp_ceiling_overlap 	= DP::check_comp_ceiling_overlap(inst, space_name)

				puts "wall_overlap_flag : #{wall_overlap_flag} : #{comp_over_flag}, "
				if wall_overlap_flag
					UI.messagebox "Component Overlaps the wall. Cannot place it."
					Sketchup.active_model.entities.erase_entities inst
				elsif comp_over_flag
					UI.messagebox "Component Overlaps the selected component. Cannot place it. Removing the new instance."
					Sketchup.active_model.entities.erase_entities inst 
				elsif comp_floor_overlap
					UI.messagebox "Component placement will make it go below room bounds. Cannot place it."
					Sketchup.active_model.entities.erase_entities inst
				elsif comp_ceiling_overlap
					UI.messagebox "Component placement will make it go above room ceiling bounds. Cannot place it."
					Sketchup.active_model.entities.erase_entities inst
				else
					Sketchup.active_model.selection.clear
					Sketchup.active_model.selection.add(inst)
				end
			end

			puts "trans: #{trans}"
		else
			xy_point = Sketchup.active_model.get_attribute :rio_global, 'wall_xy_point'
			if xy_point
				sel 		= Sketchup.active_model.selection[0]
				if sel.nil?
					pid = Sketchup.active_model.get_attribute :rio_global, 'wall_selected'
					sel = DP::get_comp_pid pid.to_i
				end
				wall_trans 	= sel.get_attribute :rio_atts, 'wall_trans'
				z_offset	= xy_point[0].to_i.mm
				case wall_trans.to_i.round
				when 0
					x_offset 	= sel.bounds.corner(0).x + xy_point[1].to_i.mm
					y_offset 	= sel.bounds.corner(0).y-defn.bounds.height 
				when 90
					x_offset 	= sel.bounds.corner(1).x + defn.bounds.height
					y_offset  	= sel.bounds.corner(1).y+xy_point[1].to_i.mm
				when -90
					x_offset 	= sel.bounds.corner(2).x - defn.bounds.height
					y_offset  	= sel.bounds.corner(2).y-xy_point[1].to_i.mm
				when 180
					x_offset 	= sel.bounds.corner(1).x - xy_point[1].to_i.mm
					y_offset    = sel.bounds.corner(3).y + defn.bounds.height
				end
				puts x_offset, y_offset, z_offset
				#comp_trans 	= Geom::Transformation.new([x_offset, y_offset, z_offset])
				#Sketchup.active_model.entities.add_instance defn, comp_trans

				tr      = Geom::Transformation.rotation([0, 0, 0], Z_AXIS, wall_trans.degrees)
				inst    = Sketchup.active_model.active_entities.add_instance defn, tr
				comp_trans 	= Geom::Transformation.new([x_offset, y_offset, z_offset])
				inst.transform!(comp_trans)
				if inst
					wall_overlap_flag 	= DP::check_wall_overlap(inst, space_name)
					comp_over_flag 		= DP::check_comp_overlap(inst, space_name)
					comp_floor_overlap 	= DP::check_comp_floor_overlap(inst, space_name)
					comp_ceiling_overlap 	= DP::check_comp_ceiling_overlap(inst, space_name)

					puts "wall_overlap_flag : #{wall_overlap_flag} : #{comp_over_flag}, "
					if wall_overlap_flag
						UI.messagebox "Component Overlaps the wall. Cannot place it."
						Sketchup.active_model.entities.erase_entities inst
					elsif comp_over_flag
						UI.messagebox "Component Overlaps the selected component. Cannot place it. Removing the new instance."
						Sketchup.active_model.entities.erase_entities inst 
					elsif comp_floor_overlap
						UI.messagebox "Component placement will make it go below room bounds. Cannot place it."
						Sketchup.active_model.entities.erase_entities inst
					elsif comp_ceiling_overlap
						UI.messagebox "Component placement will make it go above room ceiling bounds. Cannot place it."
						Sketchup.active_model.entities.erase_entities inst
					else
						Sketchup.active_model.selection.clear
						Sketchup.active_model.selection.add(inst)
						inst.set_attribute :rio_atts, 'space_name', space_name
						DP::update_all_room_components
					end
				end
				Sketchup.active_model.set_attribute(:rio_global, 'wall_xy_point', nil)
			else
				if options['edit'] == 1
					inst = Sketchup.active_model.entities.add_instance defn, comp_trans
				else
					placecomp = Sketchup.active_model.place_component defn
				end
			end
		end
		puts "inst : #{inst}"
		if inst
			if inst.is_a?(Sketchup::ComponentInstance) && !inst.deleted?
				dictionaries = ['carcass_spec', 'rio_atts']
				inst.definition.attribute_dictionaries.each{|dict|
					next if !dictionaries.include?(dict.name)
					dict.each_pair {|key,val| 
						#puts "comp_group : #{key} : #{val} : #{dict_name}"
						inst.set_attribute dict.name, key, val 
					}
				}
			end
		end
		Sketchup.active_model.active_layer = prev_active_layer

		return true
  	end

	def self.get_datas(inp, type)
		valhash = []
		getdat = @db.execute("select shutter_code, type, solid, glass, alu, ply, shutter_origin from #{@table} where space='#{inp[0]}' and category='#{inp[1]}' and carcass_code='#{inp[2]}';")
		if type == 1
			if !$shutter_code.nil?
				valhash.push("shutter_code|"+$shutter_code)
			else
				valhash.push("shutter_code|"+"No")
			end
		else
			valhash.push("shutter_code|"+getdat[0][0])
		end
		valhash.push("type|"+getdat[0][1])
		valhash.push("solid|"+getdat[0][2])
		valhash.push("glass|"+getdat[0][3])
		valhash.push("alu|"+getdat[0][4])
		valhash.push("ply|"+getdat[0][5])
		valhash.push("shut_org|"+getdat[0][6])

		return valhash
	end

	def self.get_internal_category(inp)
		if (inp[0].include?("Sliding") == true || inp[0].include?("sliding") == true)
			getcat = inp[2].split("_")
			get_val = @db.execute("select distinct category from #{@int_table} where door_type=#{getcat[1]} and slide_width=#{getcat[2]};")
		end

		if get_val.nil?
			return {}
		else
			return get_val 
		end
	end
end